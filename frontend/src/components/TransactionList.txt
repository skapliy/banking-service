<template>
  <div class="transaction-list">
    <div class="header">
      <h3>{{ accountName }}</h3>
    </div>

    <div v-if="loading" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    <div v-else-if="error" class="error">{{ error }}</div>
    <div v-else-if="transactions.length === 0" class="no-transactions">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>

    <div v-else class="transactions-table-container">
      <table class="transactions-table">
        <thead>
          <tr>
            <th>–î–∞—Ç–∞</th>
            <th>–°—É–º–º–∞ (+%)</th> <!-- –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –º–µ–Ω—è–µ—Ç—Å—è -->
            <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="tx in transactions" :key="tx.id">

            <template v-if="editingTransactionId !== tx.id">
              <td>{{ formatDateForDisplay(tx.date) }}</td>
              <td :class="{ 'deposit': tx.amount > 0, 'withdrawal': tx.amount < 0 }">
                {{ formatCurrency(tx.amount)}} <small>({{ formatCurrency(tx.interestAccrued) }})</small> <!-- –í—ã–≤–æ–¥–∏–º —Å—É–º–º—É –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã -->
              </td>
              <td>{{ tx.comment }}</td>
              <td>
                <template v-if="tx.comment !== '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫'">
                  <button @click="startEdit(tx)" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" class="edit-btn">‚úèÔ∏è</button>
                  <button @click="confirmDelete(tx.id)" title="–£–¥–∞–ª–∏—Ç—å" class="delete-btn">üóëÔ∏è</button>
                </template>
              </td>
            </template>

            <template v-else>
              <td>
                <input type="date" v-model="editData.date" class="edit-input edit-date">
              </td>
              <td>
                <input type="number" step="0.01" v-model.number="editData.amount" class="edit-input edit-amount">
              </td>
              <td>
                <input type="text" v-model="editData.comment" class="edit-input edit-comment" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
              </td>
              <td>
                <button @click="saveEdit(tx.id)" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" class="save-btn">‚úîÔ∏è</button>
                <button @click="cancelEdit" title="–û—Ç–º–µ–Ω–∞" class="cancel-btn">‚ùå</button>
              </td>
            </template>

          </tr>
        </tbody>
      </table>
    </div>
    <p v-if="actionError" class="error action-error">{{ actionError }}</p>
  </div>
</template>

<script>
import axios from '../axios-config'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

export default {
  name: 'TransactionList', // –î–æ–±–∞–≤–∏–º –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
  props: {
    accountId: {
      type: String,
      required: true
    },
    accountName: {
      type: String,
      required: true
    }
    // interestRate: Number // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø—Ä–æ–ø—Å–æ–º –∏–∑ AccountList, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  },
  data() {
    return {
      transactions: [],
      loading: true,
      error: null, // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      actionError: null, // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏
      // interestRate: 0, // –ü–æ–ª—É—á–∞–µ–º –∏–∑ accountId –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ props

      // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
      editingTransactionId: null, // ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      editData: {               // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        amount: 0,
        date: '', // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
        comment: ''
      },
      originalTransactionData: null // –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
      // --- –ö–æ–Ω–µ—Ü —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    };
  },
  methods: {
    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    async fetchTransactions() {
      this.loading = true;
      this.error = null;
      this.actionError = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      console.log(`Workspaceing transactions for account ${this.accountId}`);
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ –∑–¥–µ—Å—å (–µ—Å—Ç—å –≤ AccountList)
        const response = await axios.get(`/api/accounts/${this.accountId}/transactions`);
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º –¥–ª—è –≤–∏–¥–∞ "–≤—ã–ø–∏—Å–∫–∏"
        this.transactions = response.data.sort((a, b) => new Date(a.date) - new Date(b.date));
        console.log("Transactions loaded:", this.transactions);
      } catch (error) {
        console.error("Error fetching transactions:", error);
        this.error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ' + (error.response?.data?.detail || error.message);
        this.transactions = []; // –û—á–∏—â–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
      } finally {
        this.loading = false;
      }
    },

    // --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    formatDateForDisplay(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      // –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric', month: 'numeric', day: 'numeric' // –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
      });
    },
     formatDateForInput(dateString) {
        if (!dateString) return '';
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'YYYY-MM-DD HH:MM:SS' –≤ 'YYYY-MM-DD' –¥–ª—è input type="date"
        return dateString.substring(0, 10);
    },
    formatCurrency(amount) {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  if (numAmount === undefined || numAmount === null || isNaN(numAmount)) return '0.00'; // –ò–ª–∏ '-'

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º numeric —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ currency, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è
  return new Intl.NumberFormat('ru-RU', {
    style: 'decimal',                          // –û–±—ã—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    minimumFractionDigits: 2,                  // –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    maximumFractionDigits: 2,                  // –ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    useGrouping: true                          // –í–∫–ª—é—á–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ä–∞–∑—Ä—è–¥–æ–≤ (1 234 567,89)
  }).format(numAmount);
},

    // --- –ú–µ—Ç–æ–¥—ã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    startEdit(transaction) {
      console.log("Starting edit for:", transaction);
      this.originalTransactionData = { ...transaction }; // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      this.editingTransactionId = transaction.id;
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
      this.editData.amount = parseFloat(transaction.amount);
      this.editData.date = this.formatDateForInput(transaction.date); // YYYY-MM-DD
      this.editData.comment = transaction.comment || ''; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ null
      this.actionError = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    },
    cancelEdit() {
      this.editingTransactionId = null;
      this.originalTransactionData = null; // –û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      this.actionError = null;
    },
    async saveEdit(txId) {
      if (!this.editingTransactionId || this.editingTransactionId !== txId) return;
      this.actionError = null;

      // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¢–û–õ–¨–ö–û —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const payload = {};
      const originalAmount = parseFloat(this.originalTransactionData.amount).toFixed(2);
      const editedAmount = parseFloat(this.editData.amount).toFixed(2);
      const originalDate = this.formatDateForInput(this.originalTransactionData.date);
      const editedDate = this.editData.date;
      const originalComment = this.originalTransactionData.comment || '';
      const editedComment = this.editData.comment || '';

      if (originalAmount !== editedAmount) {
         // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if (isNaN(parseFloat(this.editData.amount))) {
             this.actionError = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞"; return;
        }
        payload.amount = parseFloat(this.editData.amount);
      }
      if (originalDate !== editedDate) {
         // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
         if (!this.editData.date || isNaN(new Date(this.editData.date).getTime())) {
              this.actionError = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"; return;
         }
         if (new Date(this.editData.date) > new Date()) {
              this.actionError = "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"; return;
         }
        payload.date = this.editData.date; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º YYYY-MM-DD
      }
      if (originalComment !== editedComment) {
        payload.comment = editedComment; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (Object.keys(payload).length === 0) {
        this.cancelEdit();
        return;
      }

      console.log(`Saving transaction ${txId} with payload:`, payload);
      try {
        await axios.put(`/api/transactions/${txId}`, payload);
        this.cancelEdit(); // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await this.fetchTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        this.$emit('transactions-updated'); // <<--- –°–û–û–ë–©–ê–ï–ú –†–û–î–ò–¢–ï–õ–Æ!
        console.log(`Transaction ${txId} saved.`);
      } catch (err) {
        console.error("Error saving transaction:", err);
        this.actionError = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + (err.response?.data?.detail || err.message);
      }
    },

    // --- –ú–µ—Ç–æ–¥ –£–¥–∞–ª–µ–Ω–∏—è ---
    async confirmDelete(txId) {
       this.actionError = null;
      if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ID: ${txId}? \n\n–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –∏–∑–º–µ–Ω–∏—Ç –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞!`)) {
        console.log(`Attempting to delete transaction ${txId}`);
        try {
            await axios.delete(`/api/transactions/${txId}`);
            console.log(`Transaction ${txId} deleted.`);
            await this.fetchTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            this.$emit('transactions-updated'); // <<--- –°–û–û–ë–©–ê–ï–ú –†–û–î–ò–¢–ï–õ–Æ!
         } catch (err) {
             console.error("Error deleting transaction:", err);
             // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
             this.actionError = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + (err.response?.data?.detail || err.message);
             // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å—Ä–∞–∑—É, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å
         }
      }
    }
  },
  watch: {
     // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞
    accountId: {
        immediate: true, // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–∫–∞–∑–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        handler(newId) {
            if (newId) {
                this.fetchTransactions();
            } else {
                this.transactions = [];
            }
        }
    }
  }
};
</script>

<style scoped>
/* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É */
.transaction-list {
  /* –°—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—Å—Ç–∞—é—Ç—Å—è */
  background-color: #fff;
  border-radius: 8px;
  padding: 15px; /* –£–º–µ–Ω—å—à–∏–º –ø–∞–¥–¥–∏–Ω–≥ */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  max-width: 90%; /* –°–¥–µ–ª–∞–µ–º —à–∏—Ä–µ */
  margin: 0 auto;
}

.header {
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
}
.header h3 { margin: 0; font-size: 1.1em; color: #333; }

.loading, .error, .no-transactions { text-align: center; padding: 15px; font-size: 0.95em; }
.error { color: #dc3545; }
.action-error { font-size: 0.9em; text-align: center; margin-top: 10px; }

.transactions-table-container {
  max-height: 65vh; /* –ú–∞–∫—Å –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ */
  overflow-y: auto;
  padding-right: 5px; /* –û—Ç—Å—Ç—É–ø –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
}

/* –°—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã */
.transactions-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9em; /* –£–º–µ–Ω—å—à–∏–º —à—Ä–∏—Ñ—Ç */
}
.transactions-table th,
.transactions-table td {
    border-bottom: 1px solid #eee;
    padding: 8px 10px; /* –£–º–µ–Ω—å—à–∏–º –ø–∞–¥–¥–∏–Ω–≥ */
    text-align: left;
    vertical-align: middle;
}
.transactions-table th {
    background-color: #f8f9fa;
    font-weight: 600;
    position: sticky; /* –ü—Ä–∏–ª–∏–ø–∞—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
    top: 0;
    z-index: 1;
}
.transactions-table td:nth-child(2) { /* –°—É–º–º–∞ */
    text-align: right;
    font-weight: 500;
    min-width: 100px;
}
.transactions-table td:nth-child(3) { /* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */
    color: #555;
    word-break: break-word;
}
.transactions-table td:nth-child(4) { /* –î–µ–π—Å—Ç–≤–∏—è */
    text-align: center;
    white-space: nowrap;
    width: 80px; /* –§–∏–∫—Å —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π */
.transactions-table button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 2px 4px;
    margin: 0 2px;
    font-size: 1.1em; /* –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–æ–∫ */
    border-radius: 3px;
}
.transactions-table button:hover {
    background-color: #eee;
}
.edit-btn { color: #007bff; }
.delete-btn { color: #dc3545; }
.save-btn { color: #28a745; }
.cancel-btn { color: #6c757d; }

/* –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
.edit-input {
    width: 100%;
    padding: 4px 6px;
    border: 1px solid #ccc;
    border-radius: 3px;
    font-size: inherit; /* –ù–∞—Å–ª–µ–¥—É–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏ */
    box-sizing: border-box;
}
.edit-amount { text-align: right; }
.edit-date { min-width: 130px; } /* –ß—Ç–æ–±—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–º–µ—Å—Ç–∏–ª—Å—è */

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å—É–º–º */
.deposit { color: #28a745; }
.withdrawal { color: #dc3545; }

/* –°—Ç–∏–ª–∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
.transactions-table-container::-webkit-scrollbar { width: 6px; }
.transactions-table-container::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 3px; }
.transactions-table-container::-webkit-scrollbar-thumb { background: #aaa; border-radius: 3px; }
.transactions-table-container::-webkit-scrollbar-thumb:hover { background: #888; }

</style>